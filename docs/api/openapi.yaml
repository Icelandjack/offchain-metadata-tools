openapi: 3.0.1
info:
  title: "Metadata Server API"
  version: ""
servers:
  - url: https://tokens.cardano.org/
    description: Production server (uses live data)
tags:
  - name: query
    description: Query metadata
  - name: property_model
    x-displayName: Property
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Property" />
  - name: ansig_model
    x-displayName: Annotated Signature
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/AnnotatedSignature" />
  - name: generic_property_model
    x-displayName: Generic Property Value
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/GenericProperty" />
  - name: batch_req_model
    x-displayName: Batch Request
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/BatchRequest" />
  - name: batch_resp_model
    x-displayName: Batch Response
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/BatchResponse" />
x-tagGroups:
  - name: Metadata Server
    tags:
      - query
  - name: Models
    tags:
      - property_model
      - ansig_model
      - generic_property_model
      - batch_req_model
      - batch_resp_model
paths:
  /metadata/{subject}:
    get:
      summary: "Query All Properties"
      tags:
        - query
      parameters:
      - name: subject
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Property'
        404:
          description: '`subject` not found'
          content: {}
  /metadata/{subject}/properties/{properties}:
    get:
      summary: "Query Specific Property"
      tags:
        - query
      parameters:
      - name: subject
        in: path
        required: true
        schema:
          type: string
      - name: properties
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Property'
        404:
          description: '`subject` or `properties` not found'
          content: {}
  /metadata/query:
    post:
      tags:
        - query
      summary: "Batch Metadata Query"
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/BatchRequest'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                required:
                - subjects
                type: object
                properties:
                  subjects:
                    type: array
                    items:
                      anyOf:
                        - $ref: '#/components/schemas/Property'
        400:
          description: Invalid `body`
          content: {}
      x-codegen-request-body-name: body
components:
  schemas:
    GenericProperty:
      required:
      - signatures
      - value
      - sequenceNumber
      type: object
      properties:
        value:
          type: string
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedSignature'
        sequenceNumber:
          type: number
          minimum: 0
    AnnotatedSignature:
      required:
      - asPublicKey
      - signature
      type: object
      properties:
        signature:
          type: string
        publicKey:
          type: string
    BatchResponse:
      required:
      - subjects
      type: object
      properties:
        subjects:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Property'
    BatchRequest:
      required:
      - subjects
      type: object
      properties:
        subjects:
          type: array
          items:
            type: string
        properties:
          type: array
          items:
            type: string
    Property:
      type: object
      required:
        - subject
      properties:
          subject:
            type: string
          policy:
            type: string
          name:
            $ref: '#/components/schemas/GenericProperty'
          description:
            $ref: '#/components/schemas/GenericProperty'
          url:
            $ref: '#/components/schemas/GenericProperty'
          ticker:
            $ref: '#/components/schemas/GenericProperty'
          logo:
            $ref: '#/components/schemas/GenericProperty'